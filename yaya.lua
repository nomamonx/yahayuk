-- Base64 decoder (biar bisa di executor seperti Delta tanpa HttpService)
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

local function base64Decode(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c + (x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

-- hasil Base64 dari script kamu
local code = [[bG9jYWwgUmF5ZmllbGQgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgnaHR0cHM6Ly9zaXJpdXMubWVudS9yYXlmaWVsZCcpKSgpCgpsb2NhbCBXaW5kb3cgPSBSYXlmaWVsZDpDcmVhdGVXaW5kb3coewogICBOYW1lID0gIlByaXZhdGU6IE1UIFlhaGF5eXVrIiwKICAgTG9hZGluZ1RpdGxlID0gIlRlbGVwb3J0IFN5c3RlbSIsCiAgIExvYWRpbmdTdWJ0aXRsZSA9ICJCeSBBQ09ORyIsCn0pCi0tIFRhYiBJbmZvcm1hc2kKLS0gPT09PT09PT09PT09PT09PT09PT09PT09CmxvY2FsIEluZm9UYWIgPSBXaW5kb3c6Q3JlYXRlVGFiKCJJbmZvcm1hc2kiLCA2MDM0NTA5OTk0KQpJbmZvVGFiOkNyZWF0ZVNlY3Rpb24oIkluZm9ybWFzaSIpCgpJbmZvVGFiOkNyZWF0ZVBhcmFncmFwaCh7CiAgICBUaXRsZSA9ICJKYW1tb2tvIEJhY2EiLAogICAgQ29udGVudCA9ICJJbmkgYWRhbGFoIHNjcmlwdCB0ZWxlcG9ydCBZYW5nIGt1YnVhdCBhc2FsIGFzYWwgYWt3b2thb3drLiIsCn0pClJheWZpZWxkOk5vdGlmeSh7CiAgIFRpdGxlID0gIlNjcmlwdCBEaW11YXQiLAogICBDb250ZW50ID0gIlRFTEFTTyBiZXJoYXNpbCEhISIsCiAgIER1cmF0aW9uID0gNi41LAogICBJbWFnZSA9IDQ0ODMzNjI0NTgsCn0pCgotLSA9PT09PT09PT09PT09PT09PT09PT09PT0KLS0gVGFiIFRlbGVwb3J0Ci0tID09PT09PT09PT09PT09PT09PT09PT09PQpsb2NhbCBUZWxlVGFiID0gV2luZG93OkNyZWF0ZVRhYigiVGVsZXBvcnQiLCA0NDgzMzYyNDU4KQoKLS0gVmFyaWFiZWwgZGVsYXkgZGVmYXVsdCAoa2h1c3VzIGF1dG8gdGVsZXBvcnQpCmxvY2FsIEF1dG9UZWxlcG9ydERlbGF5ID0gMgoKCmxvY2FsIHRlbGVwb3J0UG9pbnRzID0gewogICAgU3Bhd24gPSBDRnJhbWUubmV3KC05MzIsIDE3MCwgODgxKSwKICAgIENQMSA9IENGcmFtZS5uZXcoLTQzMCwgMjUwLCA3ODkpLAogICAgQ1AyID0gQ0ZyYW1lLm5ldygtMzQ3LCAzODksIDUyMiksCiAgICBDUDMgPSBDRnJhbWUubmV3KDI4OCwgNDMwLCA1MDYpLAogICAgQ1A0ID0gQ0ZyYW1lLm5ldygzMzQsIDQ5MSwgMzQ5KSwKICAgIENQNSA9IENGcmFtZS5uZXcoMjI0LCAzMTUsIC0xNDcpLAogICAgUHVuY2FrID0gQ0ZyYW1lLm5ldygtNTg3LCA5MDYsIC01MTEpLAp9CgotLSBNYW51YWwgVGVsZXBvcnQgVEFOUEEgZGVsYXkKVGVsZVRhYjpDcmVhdGVTZWN0aW9uKCJUZWxlcG9ydCBNYW51YWwiKQpUZWxlVGFiOkNyZWF0ZUJ1dHRvbih7IE5hbWUgPSAi8J+aqSBTcGF3biIsIENhbGxiYWNrID0gZnVuY3Rpb24oKSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gdGVsZXBvcnRQb2ludHMuU3Bhd24gZW5kIH0pClRlbGVUYWI6Q3JlYXRlQnV0dG9uKHsgTmFtZSA9ICLwn5ONIFRlbGVwb3J0IENQIDEiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IHRlbGVwb3J0UG9pbnRzLkNQMSBlbmQgfSkKVGVsZVRhYjpDcmVhdGVCdXR0b24oeyBOYW1lID0gIvCfk40gVGVsZXBvcnQgQ1AgMiIsIENhbGxiYWNrID0gZnVuY3Rpb24oKSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gdGVsZXBvcnRQb2ludHMuQ1AyIGVuZCB9KQpUZWxlVGFiOkNyZWF0ZUJ1dHRvbih7IE5hbWUgPSAi8J+TjSBUZWxlcG9ydCBDUCAzIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSB0ZWxlcG9ydFBvaW50cy5DUDMgZW5kIH0pClRlbGVUYWI6Q3JlYXRlQnV0dG9uKHsgTmFtZSA9ICLwn5ONIFRlbGVwb3J0IENQIDQiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IHRlbGVwb3J0UG9pbnRzLkNQNCBlbmQgfSkKVGVsZVRhYjpDcmVhdGVCdXR0b24oeyBOYW1lID0gIvCfk40gVGVsZXBvcnQgQ1AgNSIsIENhbGxiYWNrID0gZnVuY3Rpb24oKSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gdGVsZXBvcnRQb2ludHMuQ1A1IGVuZCB9KQpUZWxlVGFiOkNyZWF0ZUJ1dHRvbih7IE5hbWUgPSAi8J+TjSBUZWxlcG9ydCBQdW5jYWsiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IHRlbGVwb3J0UG9pbnRzLlB1bmNhayBlbmQgfSkKCi0tIEF1dG8gVGVsZXBvcnQKbG9jYWwgaXNBdXRvVGVsZXBvcnRpbmcgPSBmYWxzZQpsb2NhbCBhdXRvVGVsZXBvcnRUYXNrID0gbmlsCgpsb2NhbCBhdXRvVGVsZXBvcnRQb2ludHMgPSB7CiAgICB0ZWxlcG9ydFBvaW50cy5DUDEsCiAgICB0ZWxlcG9ydFBvaW50cy5DUDIsCiAgICB0ZWxlcG9ydFBvaW50cy5DUDMsCiAgICB0ZWxlcG9ydFBvaW50cy5DUDQsCiAgICB0ZWxlcG9ydFBvaW50cy5DUDUsCiAgICB0ZWxlcG9ydFBvaW50cy5QdW5jYWssCn0KCmxvY2FsIGZ1bmN0aW9uIHJlc3Bhd25DaGFyYWN0ZXIoKQogICAgbG9jYWwgcGxheWVyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyCiAgICBpZiBwbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KICAgICAgICBwbGF5ZXIuQ2hhcmFjdGVyOkJyZWFrSm9pbnRzKCkKICAgIGVuZAogICAgcmVwZWF0IHRhc2sud2FpdCgpIHVudGlsIHBsYXllci5DaGFyYWN0ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBhbmQgcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggPiAwCmVuZAoKbG9jYWwgZnVuY3Rpb24gaXNBdFNwYXduKHBvcywgdGhyZXNob2xkKQogICAgbG9jYWwgc3Bhd25Qb3MgPSB0ZWxlcG9ydFBvaW50cy5TcGF3bi5Qb3NpdGlvbgogICAgcmV0dXJuIChwb3MgLSBzcGF3blBvcykuTWFnbml0dWRlIDw9IHRocmVzaG9sZAplbmQKClRlbGVUYWI6Q3JlYXRlU2VjdGlvbigiVGVsZXBvcnQgT3RvbWF0aXMiKQpUZWxlVGFiOkNyZWF0ZVRvZ2dsZSh7CiAgICBOYW1lID0gIuKaoSBBdXRvIFRlbGVwb3J0ICkiLAogICAgQ3VycmVudFZhbHVlID0gZmFsc2UsCiAgICBGbGFnID0gIkF1dG9UUCIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQogICAgICAgIGlzQXV0b1RlbGVwb3J0aW5nID0gVmFsdWUKICAgICAgICBpZiBWYWx1ZSB0aGVuCiAgICAgICAgICAgIGF1dG9UZWxlcG9ydFRhc2sgPSB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIHBsYXllciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgogICAgICAgICAgICAgICAgd2hpbGUgaXNBdXRvVGVsZXBvcnRpbmcgZG8KICAgICAgICAgICAgICAgICAgICAtLSBUZWxlcG9ydCBkYXJpIENQMSBzYW1wYWkgUHVuY2FrCiAgICAgICAgICAgICAgICAgICAgZm9yIGksIGNmIGluIGlwYWlycyhhdXRvVGVsZXBvcnRQb2ludHMpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpc0F1dG9UZWxlcG9ydGluZyB0aGVuIGJyZWFrIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBjaGFyID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICAgICAgICAgICAgICBpZiBjaGFyIGFuZCBjaGFyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IGNmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlID0gIkF1dG8gVGVsZXBvcnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiVGVsZXBvcnQga2UgQ1AgIiAuLiBpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIER1cmF0aW9uID0gMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoQXV0b1RlbGVwb3J0RGVsYXkpIC0tIGRlbGF5IHNlc3VhaSBzbGlkZXIKICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGlzQXV0b1RlbGVwb3J0aW5nIHRoZW4gYnJlYWsgZW5kCiAgICAgICAgICAgICAgICAgICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICAgICAgICAgICAgICAgICAgVGl0bGUgPSAiUmVzcGF3biIsCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUmVzcGF3biBrYXJha3Rlci4uLiIsCiAgICAgICAgICAgICAgICAgICAgICAgIER1cmF0aW9uID0gMiwKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIHJlc3Bhd25DaGFyYWN0ZXIoKQoKICAgICAgICAgICAgICAgICAgICAtLSBUdW5nZ3Ugc2FtcGFpIGthcmFrdGVyIGJlbmFyLWJlbmFyIGRpIHNwYXduCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgbWF4V2FpdFRpbWUsIHdhaXRlZCA9IDYsIDAKICAgICAgICAgICAgICAgICAgICByZXBlYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDAuNSkKICAgICAgICAgICAgICAgICAgICAgICAgd2FpdGVkICs9IDAuNQogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBjaGFyID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICAgICAgICAgICAgICBpZiBjaGFyIGFuZCBjaGFyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNBdFNwYXduKGNoYXIuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbiwgMTApIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHVudGlsIHdhaXRlZCA+PSBtYXhXYWl0VGltZQoKICAgICAgICAgICAgICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICAgICAgICAgICAgICBUaXRsZSA9ICJMb29wIFVsYW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgQ29udGVudCA9ICJNdWxhaSBsYWdpIGRhcmkgQ1AxLi4uIiwKICAgICAgICAgICAgICAgICAgICAgICAgRHVyYXRpb24gPSAyLAogICAgICAgICAgICAgICAgICAgIH0pCgogICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgxLjUpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgIGVsc2UKICAgICAgICAgICAgaWYgYXV0b1RlbGVwb3J0VGFzayB0aGVuCiAgICAgICAgICAgICAgICB0YXNrLmNhbmNlbChhdXRvVGVsZXBvcnRUYXNrKQogICAgICAgICAgICAgICAgYXV0b1RlbGVwb3J0VGFzayA9IG5pbAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICAgICAgICAgIFRpdGxlID0gIkF1dG8gVGVsZXBvcnQiLAogICAgICAgICAgICAgICAgQ29udGVudCA9ICJBdXRvIHRlbGVwb3J0IGRpaGVudGlrYW4hIiwKICAgICAgICAgICAgICAgIER1cmF0aW9uID0gMywKICAgICAgICAgICAgfSkKICAgICAgICBlbmQKICAgIGVuZCwKfSkKVGVsZVRhYjpDcmVhdGVTZWN0aW9uKCJBdHVyIERlbGF5IEF1dG8gVGVsZXBvcnQiKQotLSBTbGlkZXIgdW50dWsgYXR1ciBkZWxheSBhdXRvIHRlbGVwb3J0ClRlbGVUYWI6Q3JlYXRlU2xpZGVyKHsKICAgIE5hbWUgPSAi4o+zIERlbGF5IEF1dG8gVGVsZXBvcnQgKGRldGlrKSIsCiAgICBSYW5nZSA9IHswLCAxMH0sCiAgICBJbmNyZW1lbnQgPSAwLjUsCiAgICBTdWZmaXggPSAicyIsCiAgICBDdXJyZW50VmFsdWUgPSBBdXRvVGVsZXBvcnREZWxheSwKICAgIEZsYWcgPSAiQVREZWxheSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQogICAgICAgIEF1dG9UZWxlcG9ydERlbGF5ID0gVmFsdWUKICAgIGVuZCwKfSkKCi0tID09PT09PT09PT09PT09PT09PT09PT09PQotLSBUYWIgUGVuZ2F0dXJhbgotLSA9PT09PT09PT09PT09PT09PT09PT09PT0KbG9jYWwgU2V0dGluZ3NUYWIgPSBXaW5kb3c6Q3JlYXRlVGFiKCJQZW5nYXR1cmFuIiwgNjAzNDUwOTk5MykKClNldHRpbmdzVGFiOkNyZWF0ZVNsaWRlcih7CiAgIE5hbWUgPSAiV2Fsa1NwZWVkIiwKICAgUmFuZ2UgPSB7MTYsIDIwMH0sCiAgIEluY3JlbWVudCA9IDUsCiAgIFN1ZmZpeCA9ICJTcGVlZCIsCiAgIEN1cnJlbnRWYWx1ZSA9IDE2LAogICBGbGFnID0gIldhbGtTcGVlZFNsaWRlciIsCiAgIENhbGxiYWNrID0gZnVuY3Rpb24oVmFsdWUpCiAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLldhbGtTcGVlZCA9IFZhbHVlCiAgIGVuZCwKfSkKClNldHRpbmdzVGFiOkNyZWF0ZVNsaWRlcih7CiAgIE5hbWUgPSAiSnVtcFBvd2VyIiwKICAgUmFuZ2UgPSB7NTAsIDMwMH0sCiAgIEluY3JlbWVudCA9IDEwLAogICBTdWZmaXggPSAiSnVtcCIsCiAgIEN1cnJlbnRWYWx1ZSA9IDUwLAogICBGbGFnID0gIkp1bXBTbGlkZXIiLAogICBDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQogICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5KdW1wUG93ZXIgPSBWYWx1ZQogICBlbmQsCn0pCgpTZXR0aW5nc1RhYjpDcmVhdGVUb2dnbGUoewogICBOYW1lID0gIkluZmluaXRlIEp1bXAiLAogICBDdXJyZW50VmFsdWUgPSBmYWxzZSwKICAgRmxhZyA9ICJJbmZKdW1wVG9nZ2xlIiwKICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihWYWx1ZSkKICAgICAgIGxvY2FsIFVzZXJJbnB1dFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKQogICAgICAgaWYgVmFsdWUgdGhlbgogICAgICAgICAgIEluZkp1bXBDb25uZWN0aW9uID0gVXNlcklucHV0U2VydmljZS5KdW1wUmVxdWVzdDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIik6Q2hhbmdlU3RhdGUoIkp1bXBpbmciKQogICAgICAgICAgIGVuZCkKICAgICAgIGVsc2UKICAgICAgICAgICBpZiBJbmZKdW1wQ29ubmVjdGlvbiB0aGVuCiAgICAgICAgICAgICAgIEluZkp1bXBDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICBJbmZKdW1wQ29ubmVjdGlvbiA9IG5pbAogICAgICAgICAgIGVuZAogICAgICAgZW5kCiAgIGVuZCwKfSkKCi0tID09PT09PT09PT09PT09PT09PT09PT09PQotLSBUYW1iYWhhbjogRGV0ZWtzaSBBZG1pbiBkYW4gU3VtbWl0ID4gMTAwCi0tID09PT09PT09PT09PT09PT09PT09PT09PQpsb2NhbCBQbGF5ZXJzID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikKCi0tIEZ1bmdzaSBkZXRla3NpIGFkbWluIGRhcmkgQmlsbGJvYXJkR3VpCmxvY2FsIGZ1bmN0aW9uIERldGVjdEFkbWlucygpCiAgICBsb2NhbCBhZG1pbkNvdW50ID0gMAogICAgZm9yIF8sIHBsYXllciBpbiBpcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgbG9jYWwgY2hhcmFjdGVyID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgIGlmIGNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgIGxvY2FsIGhlYWQgPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkhlYWQiKQogICAgICAgICAgICBpZiBoZWFkIHRoZW4KICAgICAgICAgICAgICAgIGZvciBfLCBndWkgaW4gaXBhaXJzKGhlYWQ6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBndWk6SXNBKCJCaWxsYm9hcmRHdWkiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLCBsYWJlbCBpbiBpcGFpcnMoZ3VpOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsYWJlbDpJc0EoIlRleHRMYWJlbCIpIGFuZCBzdHJpbmcuZmluZChzdHJpbmcudXBwZXIobGFiZWwuVGV4dCksICJBRE1JTiIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZG1pbkNvdW50ICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCiAgICByZXR1cm4gYWRtaW5Db3VudAplbmQKCi0tIEZ1bmdzaSBkZXRla3NpIFN1bW1pdCA+IDEwMApsb2NhbCBmdW5jdGlvbiBEZXRlY3RTdW1taXRBYm92ZTEwMCgpCiAgICBmb3IgXywgcGxheWVyIGluIGlwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICBsb2NhbCBjaGFyYWN0ZXIgPSBwbGF5ZXIuQ2hhcmFjdGVyCiAgICAgICAgaWYgY2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgbG9jYWwgaGVhZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCiAgICAgICAgICAgIGlmIGhlYWQgdGhlbgogICAgICAgICAgICAgICAgZm9yIF8sIGd1aSBpbiBpcGFpcnMoaGVhZDpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgIGlmIGd1aTpJc0EoIkJpbGxib2FyZEd1aSIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8sIGxhYmVsIGluIGlwYWlycyhndWk6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxhYmVsOklzQSgiVGV4dExhYmVsIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHN1bW1pdFRleHQgPSBzdHJpbmcubWF0Y2gobGFiZWwuVGV4dCwgIlN1bW1pdDolcyooJWQrKSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgc3VtbWl0VGV4dCBhbmQgdG9udW1iZXIoc3VtbWl0VGV4dCkgPiAxMDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZSwgcGxheWVyLk5hbWUsIHRvbnVtYmVyKHN1bW1pdFRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiBmYWxzZQplbmQKCi0tIFRvZ2dsZTogQ2hlY2sgQWRtaW4KbG9jYWwgQ2hlY2tBZG1pbkxvb3AKU2V0dGluZ3NUYWI6Q3JlYXRlVG9nZ2xlKHsKICAgIE5hbWUgPSAiQ2hlY2sgQWRtaW4gKEJldGEpIiwKICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgRmxhZyA9ICJDaGVja0FkbWluVG9nZ2xlIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgaWYgVmFsdWUgdGhlbgogICAgICAgICAgICBDaGVja0FkbWluTG9vcCA9IHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgd2hpbGUgdHJ1ZSBkbwogICAgICAgICAgICAgICAgICAgIGxvY2FsIGFkbWluQ291bnQgPSBEZXRlY3RBZG1pbnMoKQogICAgICAgICAgICAgICAgICAgIGlmIGFkbWluQ291bnQgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlID0gIkFkbWluIFRlcmRldGVrc2khIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPSB0b3N0cmluZyhhZG1pbkNvdW50KS4uIiBBZG1pbiB0ZXJkZXRla3NpIGRpIHNlcnZlciEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgRHVyYXRpb24gPSA1LAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCg1KQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIGlmIENoZWNrQWRtaW5Mb29wIHRoZW4KICAgICAgICAgICAgICAgIHRhc2suY2FuY2VsKENoZWNrQWRtaW5Mb29wKQogICAgICAgICAgICAgICAgQ2hlY2tBZG1pbkxvb3AgPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQsCn0pCgotLSBUb2dnbGU6IENoZWNrIFN1bW1pdCA+IDEwMAotLSBUb2dnbGU6IENoZWNrIFN1bW1pdCA+IDEwMApsb2NhbCBDaGVja1N1bW1pdExvb3AKU2V0dGluZ3NUYWI6Q3JlYXRlVG9nZ2xlKHsKICAgIE5hbWUgPSAiQ2hlY2sgU3VtbWl0IFBybyIsCiAgICBDdXJyZW50VmFsdWUgPSBmYWxzZSwKICAgIEZsYWcgPSAiQ2hlY2tTdW1taXRUb2dnbGUiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihWYWx1ZSkKICAgICAgICBpZiBWYWx1ZSB0aGVuCiAgICAgICAgICAgIENoZWNrU3VtbWl0TG9vcCA9IHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgd2hpbGUgdHJ1ZSBkbwogICAgICAgICAgICAgICAgICAgIGxvY2FsIGhpZ2hlc3RTdW1taXQgPSAxMDAgLS0gbWluaW1hbCB0aHJlc2hvbGQKICAgICAgICAgICAgICAgICAgICBsb2NhbCBoaWdoZXN0UGxheWVyID0gbmlsCgogICAgICAgICAgICAgICAgICAgIGZvciBfLCBwbGF5ZXIgaW4gaXBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBjaGFyYWN0ZXIgPSBwbGF5ZXIuQ2hhcmFjdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBoZWFkID0gY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIZWFkIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGhlYWQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLCBndWkgaW4gaXBhaXJzKGhlYWQ6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZ3VpOklzQSgiQmlsbGJvYXJkR3VpIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8sIGxhYmVsIGluIGlwYWlycyhndWk6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsYWJlbDpJc0EoIlRleHRMYWJlbCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgc3VtbWl0VGV4dCA9IHN0cmluZy5tYXRjaChsYWJlbC5UZXh0LCAiW1NzXXVtbWl0W14lZF0qKFslZCwlLl0rKSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHN1bW1pdFRleHQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtbWl0VGV4dCA9IHN1bW1pdFRleHQ6Z3N1YigiWywlLl0iLCAiIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHN1bW1pdE51bWJlciA9IHRvbnVtYmVyKHN1bW1pdFRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzdW1taXROdW1iZXIgYW5kIHN1bW1pdE51bWJlciA+IGhpZ2hlc3RTdW1taXQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hlc3RTdW1taXQgPSBzdW1taXROdW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdoZXN0UGxheWVyID0gcGxheWVyLk5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgaWYgaGlnaGVzdFBsYXllciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIFJheWZpZWxkOk5vdGlmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaXRsZSA9ICJTdW1taXQgVGVydGluZ2dpIFRlcmRldGVrc2khIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPSBoaWdoZXN0UGxheWVyIC4uICIgcHVueWEgU3VtbWl0OiAiIC4uIGhpZ2hlc3RTdW1taXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEdXJhdGlvbiA9IDUsCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCg1KQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIGlmIENoZWNrU3VtbWl0TG9vcCB0aGVuCiAgICAgICAgICAgICAgICB0YXNrLmNhbmNlbChDaGVja1N1bW1pdExvb3ApCiAgICAgICAgICAgICAgICBDaGVja1N1bW1pdExvb3AgPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQsCn0pCgotLSAoc2lzYSBrb2RlIHBlbmdhdHVyYW4gZGFuIGRldGVrc2kgYWRtaW4gdGV0YXAgc2FtYSwgdGlkYWsgYWt1IHVsYW5nIGRpIHNpbmkpCg==
]]

-- decode + jalankan
local decoded = base64Decode(code)
loadstring(decoded)()
